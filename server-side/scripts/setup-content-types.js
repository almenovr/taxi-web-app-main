const axios = require('axios');

async function setupContentTypes() {
  try {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');

    const baseURL = 'http://localhost:1337';

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    const loginData = {
      email: 'almenov.r.r.i.1.16@gmail.com', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à email
      password: 'Ralmenov98' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
    };

    let authToken = null;

    try {
      const loginResponse = await axios.post(`${baseURL}/admin/login`, loginData);
      authToken = loginResponse.data.data.token;
      console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    } catch (loginError) {
      console.log('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
      console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∫–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∞');
      return;
    }

    const headers = {
      Authorization: `Bearer ${authToken}`
    };

    // –°–æ–∑–¥–∞–µ–º Collection Type –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    console.log('üöó –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Car...');
    const carTypeData = {
      contentType: {
        kind: 'collectionType',
        collectionName: 'cars',
        displayName: 'Car',
        description: '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–ª—è —Ç–∞–∫—Å–∏',
        pluralName: 'cars',
        singularName: 'car',
        attributes: {
          className: {
            type: 'string',
            required: true
          },
          listCars: {
            type: 'string',
            required: true
          },
          price: {
            type: 'integer',
            required: true
          },
          description: {
            type: 'richtext',
            required: true
          },
          isBusiness: {
            type: 'boolean',
            default: false
          },
          pricePerKm: {
            type: 'decimal',
            required: true
          },
          carImg: {
            type: 'media',
            multiple: false,
            required: false,
            allowedTypes: ['images']
          },
          destinations: {
            type: 'relation',
            relation: 'manyToMany',
            target: 'api::destination.destination',
            inversedBy: 'cars'
          }
        },
        options: {
          draftAndPublish: true
        },
        pluginOptions: {}
      }
    };

    try {
      await axios.post(`${baseURL}/content-type-builder/content-types`, carTypeData, { headers });
      console.log('‚úÖ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Car —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      console.log('‚ö†Ô∏è –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Car —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', error.response?.data?.message);
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç faqs
    console.log('‚ùì –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ faqs...');
    const faqsData = {
      component: {
        category: 'shared',
        displayName: 'FAQs',
        icon: 'question-circle',
        attributes: {
          faqTitle: {
            type: 'string',
            required: true
          },
          faqDescription: {
            type: 'text',
            required: true
          }
        }
      }
    };

    try {
      await axios.post(`${baseURL}/content-type-builder/components`, faqsData, { headers });
      console.log('‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç faqs —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      console.log('‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç faqs —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', error.response?.data?.message);
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç rich-text
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ rich-text...');
    const richTextData = {
      component: {
        category: 'shared',
        displayName: 'Rich Text Block',
        icon: 'align-left',
        attributes: {
          body: {
            type: 'richtext',
            required: true
          }
        }
      }
    };

    try {
      await axios.post(`${baseURL}/content-type-builder/components`, richTextData, { headers });
      console.log('‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç rich-text —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      console.log('‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç rich-text —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', error.response?.data?.message);
    }

    // –°–æ–∑–¥–∞–µ–º Collection Type –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    console.log('üó∫Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Destination...');
    const destinationTypeData = {
      contentType: {
        kind: 'collectionType',
        collectionName: 'destinations',
        displayName: 'Destination',
        description: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∞–∫—Å–∏',
        pluralName: 'destinations',
        singularName: 'destination',
        attributes: {
          title: {
            type: 'string',
            required: true
          },
          slug: {
            type: 'uid',
            targetField: 'title',
            required: true
          },
          cityOrigin: {
            type: 'string',
            required: true
          },
          cityWhen: {
            type: 'string',
            required: true
          },
          description: {
            type: 'richtext',
            required: true
          },
          siteTitle: {
            type: 'string'
          },
          siteDescription: {
            type: 'text'
          },
          displayImage: {
            type: 'media',
            multiple: false,
            required: false,
            allowedTypes: ['images']
          },
          mapLink: {
            type: 'text'
          },
          cars: {
            type: 'relation',
            relation: 'manyToMany',
            target: 'api::car.car',
            mappedBy: 'destinations'
          },
          faqs: {
            type: 'component',
            repeatable: true,
            component: 'shared.faqs'
          },
          textBlock: {
            type: 'component',
            repeatable: true,
            component: 'shared.rich-text'
          }
        },
        options: {
          draftAndPublish: true
        },
        pluginOptions: {}
      }
    };

    try {
      await axios.post(`${baseURL}/content-type-builder/content-types`, destinationTypeData, { headers });
      console.log('‚úÖ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Destination —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      console.log('‚ö†Ô∏è –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Destination —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', error.response?.data?.message);
    }

    // –°–æ–∑–¥–∞–µ–º Single Type –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    console.log('üåç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Global...');
    const globalTypeData = {
      contentType: {
        kind: 'singleType',
        collectionName: 'globals',
        displayName: 'Global',
        description: '–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞',
        singularName: 'global',
        pluralName: 'globals',
        attributes: {
          siteName: {
            type: 'string'
          },
          siteDescription: {
            type: 'text'
          },
          sliderTitle: {
            type: 'string'
          },
          sliderText: {
            type: 'text'
          },
          blockTitle: {
            type: 'string'
          },
          blockText: {
            type: 'richtext'
          },
          blockTitleTwo: {
            type: 'string'
          },
          blockTextTwo: {
            type: 'richtext'
          },
          blockTitleThree: {
            type: 'string'
          },
          blockTextThree: {
            type: 'richtext'
          },
          blockTitleFour: {
            type: 'string'
          },
          blockTextFour: {
            type: 'richtext'
          },
          blockTitleFive: {
            type: 'string'
          },
          blockTextFive: {
            type: 'richtext'
          },
          destinations: {
            type: 'relation',
            relation: 'oneToMany',
            target: 'api::destination.destination',
            mappedBy: 'global'
          }
        },
        options: {
          draftAndPublish: true
        },
        pluginOptions: {}
      }
    };

    try {
      await axios.post(`${baseURL}/content-type-builder/content-types`, globalTypeData, { headers });
      console.log('‚úÖ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Global —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      console.log('‚ö†Ô∏è –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Global —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', error.response?.data?.message);
    }

    console.log('üéâ –í—Å–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
    console.log('üì± –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∞–¥–º–∏–Ω–∫–µ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error.response?.data || error.message);
  }
}

setupContentTypes();